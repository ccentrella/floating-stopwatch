<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

	<!--Set window properties-->
	<Style TargetType="{x:Type Window}"
		   x:Key="TransparentWindows">
		<Style.Triggers>
			<Trigger Property="IsActive"
					 Value="False">
				<Trigger.EnterActions>
					<BeginStoryboard>
						<Storyboard>
							<DoubleAnimation Storyboard.TargetProperty="Opacity"
											 To="0.4" />
						</Storyboard>
					</BeginStoryboard>
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<BeginStoryboard>
						<Storyboard>
							<DoubleAnimation Storyboard.TargetProperty="Opacity"
											 To="1" />
						</Storyboard>
					</BeginStoryboard>
				</Trigger.ExitActions>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!--This represents crystal tooltips.-->
	<Style TargetType="{x:Type ToolTip}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToolTip}">
					<Grid x:Name="MainGrid">
						<Border BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								CornerRadius="0"
								Background="{TemplateBinding Background}" />
						<ContentPresenter Margin="7,3" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Foreground"
				Value="Black" />
		<Setter Property="BorderBrush"
				Value="Gray" />
		<Setter Property="BorderThickness"
				Value="1" />
		<Setter Property="Background"
				Value="WhiteSmoke" />
	</Style>

	<!--Set label properties-->
	<Style TargetType="{x:Type Label}">
		<Setter Property="Foreground"
				Value="White" />
		<Setter Property="FontSize"
				Value="24" />
		<Setter Property="Padding"
				Value="0" />
	</Style>

	<!--Set button properties-->
	<Style TargetType="{x:Type Button}">
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="Foreground"
				Value="White" />
		<Setter Property="BorderBrush"
				Value="Transparent" />
		<Setter Property="Width"
				Value="50" />
		<Setter Property="Height"
				Value="50" />
		<Setter Property="Padding"
				Value="5" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid Name="MainGrid">
						<Border Background="{TemplateBinding Background}"
								ClipToBounds="{TemplateBinding ClipToBounds}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}">
							<ContentPresenter RecognizesAccessKey="True"
											  Margin="{TemplateBinding Padding}"
											  x:Name="Content"
											  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
						</Border>
						<Ellipse x:Name="AnimationEllipse"
								 HorizontalAlignment="Center"
								 VerticalAlignment="Center"
								 Height="{TemplateBinding Height}"
								 Width="{TemplateBinding Width}"
								 Fill="DodgerBlue"
								 Opacity="0"
								 RenderTransformOrigin="0.5,0.5">
							<Ellipse.RenderTransform>
								<ScaleTransform ScaleX="0.15"
												ScaleY="0.15" />
							</Ellipse.RenderTransform>
						</Ellipse>
					</Grid>

					<ControlTemplate.Triggers>

						<!--While the button is pressed, there will be a cool animation.-->
						<Trigger Property="IsPressed"
								 Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Duration="0"
														 Storyboard.TargetName="AnimationEllipse"
														 Storyboard.TargetProperty="Opacity"
														 To="0.4" />
										<DoubleAnimation Duration="0:0:0.25"
														 Storyboard.TargetName="AnimationEllipse"
														 Storyboard.TargetProperty="RenderTransform.ScaleX"
														 To="1.4" />
										<DoubleAnimation Duration="0:0:0.25"
														 Storyboard.TargetName="AnimationEllipse"
														 Storyboard.TargetProperty="RenderTransform.ScaleY"
														 To="1.4" />

									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Duration="0:0:0.25"
														 Storyboard.TargetName="AnimationEllipse"
														 Storyboard.TargetProperty="RenderTransform.ScaleX"
														 To="2" />
										<DoubleAnimation Duration="0:0:0.25"
														 Storyboard.TargetName="AnimationEllipse"
														 Storyboard.TargetProperty="RenderTransform.ScaleY"
														 To="2" />
										<DoubleAnimation Duration="0"
														 BeginTime="0:0:0.25"
														 Storyboard.TargetName="AnimationEllipse"
														 Storyboard.TargetProperty="Opacity"
														 To="0" />
										<DoubleAnimation Duration="0"
														 BeginTime="0:0:0.25"
														 Storyboard.TargetName="AnimationEllipse"
														 Storyboard.TargetProperty="RenderTransform.ScaleX"
														 To="1" />
										<DoubleAnimation Duration="0"
														 BeginTime="0:0:0.25"
														 Storyboard.TargetName="AnimationEllipse"
														 Storyboard.TargetProperty="RenderTransform.ScaleY"
														 To="1" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>

						<!--While the mouse hovers over the button, the color will change.-->
						<Trigger Property="IsMouseOver"
								 Value="True">
							<Setter Property="Foreground"
									Value="DodgerBlue" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--Set template for crystal advanced buttons. These are advanced, and greatly fade when disabled.-->
	<ControlTemplate TargetType="{x:Type Button}"
					 x:Key="CrystalAdvancedButton">
		<!--Advanced-->
		<Grid ClipToBounds="{TemplateBinding ClipToBounds}">
			<Border x:Name="Background"
					Opacity="0.8"
					BorderBrush="{TemplateBinding BorderBrush}"
					CornerRadius="0"
					BorderThickness="{TemplateBinding BorderThickness}"
					Background="{TemplateBinding Background}" />
			<ContentPresenter RecognizesAccessKey="True"
							  Margin="{TemplateBinding Padding}"
							  x:Name="Content"
							  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
			<VisualStateManager.VisualStateGroups>
				<VisualStateGroup Name="CommonStates">
					<VisualStateGroup.Transitions>
						<VisualTransition GeneratedDuration="0:0:0.5" />
						<VisualTransition To="Pressed"
										  GeneratedDuration="0" />
						<VisualTransition From="Pressed"
										  GeneratedDuration="0" />
					</VisualStateGroup.Transitions>
					<VisualState Name="Normal" />
					<VisualState Name="Disabled">
						<Storyboard>
							<DoubleAnimation Storyboard.TargetProperty="Opacity"
											 To="0.3" />
						</Storyboard>
					</VisualState>
					<VisualState Name="MouseOver">
						<Storyboard>
							<DoubleAnimation Storyboard.TargetName="Background"
											 Storyboard.TargetProperty="Opacity"
											 To="0.925" />
						</Storyboard>
					</VisualState>
					<VisualState Name="Pressed">
						<Storyboard>
							<DoubleAnimation Storyboard.TargetName="Background"
											 Storyboard.TargetProperty="Opacity"
											 To="1" />
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
			</VisualStateManager.VisualStateGroups>
		</Grid>
		<ControlTemplate.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsFocused"
							   Value="True" />
					<Condition Property="IsKeyboardFocusWithin"
							   Value="True" />
				</MultiTrigger.Conditions>
				<MultiTrigger.EnterActions>
					<BeginStoryboard x:Name="focusedStoryboard">
						<Storyboard>
							<DoubleAnimation Storyboard.TargetName="Background"
											 Storyboard.TargetProperty="Opacity"
											 From="0.8"
											 To="0.95"
											 AutoReverse="True"
											 RepeatBehavior="Forever">
								<DoubleAnimation.EasingFunction>
									<QuadraticEase EasingMode="EaseInOut" />
								</DoubleAnimation.EasingFunction>
							</DoubleAnimation>
						</Storyboard>
					</BeginStoryboard>
				</MultiTrigger.EnterActions>
				<MultiTrigger.ExitActions>
					<RemoveStoryboard BeginStoryboardName="focusedStoryboard" />
				</MultiTrigger.ExitActions>
			</MultiTrigger>
			<Trigger Property="IsDefaulted"
					 Value="True">
				<Trigger.EnterActions>
					<BeginStoryboard x:Name="defaultedStoryboard">
						<Storyboard>
							<DoubleAnimation Storyboard.TargetName="Background"
											 Storyboard.TargetProperty="Opacity"
											 From="0.8"
											 To="0.95"
											 AutoReverse="True"
											 RepeatBehavior="Forever">
								<DoubleAnimation.EasingFunction>
									<QuadraticEase EasingMode="EaseInOut" />
								</DoubleAnimation.EasingFunction>
							</DoubleAnimation>
						</Storyboard>
					</BeginStoryboard>
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<RemoveStoryboard BeginStoryboardName="defaultedStoryboard" />
				</Trigger.ExitActions>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
</ResourceDictionary>